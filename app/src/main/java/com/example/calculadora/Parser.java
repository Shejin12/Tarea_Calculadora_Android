
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.calculadora;

import java_cup.runtime.*;
import android.util.Log;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\003\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\010\004\006\005\005\012\010\001\002\000" +
    "\014\002\000\006\013\007\012\010\015\011\014\001\002" +
    "\000\016\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013" +
    "\uffff\001\002\000\016\002\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\013\ufffe\001\002\000\004\002\023\001\002\000" +
    "\010\004\006\005\005\012\010\001\002\000\014\006\013" +
    "\007\012\010\015\011\014\013\016\001\002\000\010\004" +
    "\006\005\005\012\010\001\002\000\010\004\006\005\005" +
    "\012\010\001\002\000\010\004\006\005\005\012\010\001" +
    "\002\000\010\004\006\005\005\012\010\001\002\000\016" +
    "\002\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\001" +
    "\002\000\016\002\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\013\ufffb\001\002\000\016\002\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\001\002\000\016\002\ufffd\006\ufffd" +
    "\007\ufffd\010\015\011\014\013\ufffd\001\002\000\016\002" +
    "\ufffc\006\ufffc\007\ufffc\010\015\011\014\013\ufffc\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\010\001\001\000\002\001\001\000\004\002" +
    "\021\001\001\000\004\002\020\001\001\000\004\002\017" +
    "\001\001\000\004\002\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Parser(Lexer lexer){
        super(lexer);
    }

    public String resultado = "";

public void syntax_error(Symbol cur_token) {
    String mensaje ="Simbolo con error: " + symbl_name_from_id(cur_token.sym) ;
    
    if(expected_token_ids().isEmpty()){
        mensaje += " NO SE ESPERABA OTRO SIMBOLO";
    }else{
        mensaje += " NO SE ESPERABA ESE SIMBOLO";
    }

    Log.d("SNXERR", mensaje);    
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= entero 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 resultado = String.valueOf((double)result); 
                                 Log.d("PS", resultado);
                                 Log.d("PD", String.valueOf((double)result)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entero ::= FLOTANTES 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double)numero; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entero ::= NUMEROS 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double)numero; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // entero ::= entero SUMA entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = (double)num1 + (double)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // entero ::= entero RESTA entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double)num1 - (double)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // entero ::= entero MULTI entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double)num1 * (double)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // entero ::= entero DIVISN entero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double)num1 / (double)num2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // entero ::= PAROPN entero PARCLS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = (double)num; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entero",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
